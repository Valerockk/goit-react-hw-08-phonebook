{"version":3,"sources":["views/LoginView/LoginView.module.css","views/LoginView/LoginView.js"],"names":["module","exports","LoginView","dispatch","useDispatch","isLoading","useSelector","authSelectors","getLoading","useState","email","setEmail","password","setPassword","handleChange","e","target","name","value","onSubmit","preventDefault","trim","toast","error","authOperations","logIn","className","style","form","autoComplete","label","variant","color","type","onChange","textField","size"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,KAAO,wBAAwB,UAAY,+B,+KCQ9C,SAASC,IACtB,IAAMC,EAAWC,cACXC,EAAYC,YAAYC,IAAcC,YAFV,EAGRC,mBAAS,IAHD,mBAG3BC,EAH2B,KAGpBC,EAHoB,OAIFF,mBAAS,IAJP,mBAI3BG,EAJ2B,KAIjBC,EAJiB,KAM5BC,EAAe,SAACC,GAAO,IAAD,EACFA,EAAEC,OAAlBC,EADkB,EAClBA,KAAMC,EADY,EACZA,MAEd,OAAQD,GACN,IAAK,QACHN,EAASO,GACT,MAEF,IAAK,WACHL,EAAYK,GACZ,MAEF,QACE,SAcN,OACE,uBAAMC,SAXa,SAACJ,GAEpB,GADAA,EAAEK,iBACmB,KAAjBV,EAAMW,QAAqC,KAApBT,EAASS,OAClC,OAAOC,IAAMC,MAAM,2CAErBpB,EAASqB,IAAeC,MAAM,CAAEf,QAAOE,cACvCD,EAAS,IACTE,EAAY,KAIkBa,UAAWC,IAAMC,KAAMC,aAAa,MAAlE,UACE,cAAC,IAAD,CACEC,MAAM,QACNC,QAAQ,WACRC,MAAM,YACNC,KAAK,QACLhB,KAAK,QACLC,MAAOR,EACPwB,SAAUpB,EACVY,UAAWC,IAAMQ,YAGnB,cAAC,IAAD,CACEL,MAAM,WACNC,QAAQ,WACRC,MAAM,YACNC,KAAK,WACLhB,KAAK,WACLC,MAAON,EACPsB,SAAUpB,EACVY,UAAWC,IAAMQ,aAGjB9B,GACA,cAAC,IAAD,CACE0B,QAAQ,YACRC,MAAM,YACNI,KAAK,QACLH,KAAK,SAJP,oBAUD5B,GAAa,cAAC,IAAD","file":"static/js/7.60911a0e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"LoginView_form__9kRj8\",\"textField\":\"LoginView_textField__3XcuD\"};","import { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { authOperations, authSelectors } from \"../../redux/auth\";\nimport { toast } from \"react-toastify\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Button from \"@material-ui/core/Button\";\nimport LoaderComponent from \"../../components/LoaderComponent/LoaderComponent\";\nimport style from \"./LoginView.module.css\";\n\nexport default function LoginView() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(authSelectors.getLoading);\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n\n  const handleChange = (e) => {\n    const { name, value } = e.target;\n\n    switch (name) {\n      case \"email\":\n        setEmail(value);\n        break;\n\n      case \"password\":\n        setPassword(value);\n        break;\n\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    if (email.trim() === \"\" || password.trim() === \"\") {\n      return toast.error(\"ðŸ’© Please fill in all fields!\");\n    }\n    dispatch(authOperations.logIn({ email, password }));\n    setEmail(\"\");\n    setPassword(\"\");\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={style.form} autoComplete=\"off\">\n      <TextField\n        label=\"Email\"\n        variant=\"outlined\"\n        color=\"secondary\"\n        type=\"email\"\n        name=\"email\"\n        value={email}\n        onChange={handleChange}\n        className={style.textField}\n      />\n\n      <TextField\n        label=\"Password\"\n        variant=\"outlined\"\n        color=\"secondary\"\n        type=\"password\"\n        name=\"password\"\n        value={password}\n        onChange={handleChange}\n        className={style.textField}\n      />\n\n      {!isLoading && (\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          size=\"large\"\n          type=\"submit\"\n        >\n          Log in\n        </Button>\n      )}\n\n      {isLoading && <LoaderComponent />}\n    </form>\n  );\n}\n"],"sourceRoot":""}